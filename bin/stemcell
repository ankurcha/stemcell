#!/usr/bin/env ruby
#
# Copyright (c) 2009-2012 VMware, Inc.

$:.unshift File.join(__FILE__, "..", "..", "lib")

require 'rubygems'
require 'thor'
require 'stemcell'

module StemCellBuilderCLI

  class Build < Thor
    class_option :prefix, :banner => "<prefix>", :desc => "Directory to use as staging area for all the stemcell work", :default => Dir.pwd
    class_option :architecture, :banner => "<architecture>", :desc => "Architecture of the OS", :default => 'x86_64'
    class_option :infrastructure, :banner => "<infrastructure>", :desc => "Infrastructure hosting the vm", :default => 'vsphere'
    class_option :target, :banner=>"<target>", :desc => "Path for the final stemcell"
    class_option :agent_src_path, :banner => "<agent_src_path>", :desc => "Bosh Agent Source path"
    class_option :agent_version, :banner => "<agent version>", :desc => "Bosh Agent Version", :default => Bosh::Agent::VERSION
    class_option :bosh_protocol, :banner => "<bosh_protocol>", :desc => "Bosh Protocol Version", :default => Bosh::Agent::BOSH_PROTOCOL
    class_option :iso, :banner => "<iso file path>", :desc => "Path to the iso file to use"
    class_option :iso_md5, :banner => "<iso file path>", :desc => "MD5 of the ISO"

    desc "ubuntu <name>", "Build a new ubuntu stemcell named <name>"
    def ubuntu(name)
      Bosh::Agent::StemCell::UbuntuBuilder.new(options.merge({:name => name}).reject { |k, v| v.nil? }, {}).run
    end

    desc "redhat <name>", "Build a new redhat stemcell named <name>"
    def redhat(name)
      Bosh::Agent::StemCell::RedhatBuilder.new(options.merge({:name => name}).reject { |k, v| v.nil? }, {}).run
    end

    desc "noop <name>", "Build a new noop stemcell named <name> [this is good for testing only]"
    def noop(name)
      Bosh::Agent::StemCell::NoOpBuilder.new(options.merge({:name => name}).reject { |k, v| v.nil? }, {}).run
    end

  end

  class Info < Thor

  end

  class StemCellBuilder < Thor

    desc "build SUBCOMMAND ...ARGS", "Build a new stemcell"
    subcommand "build", Build

    desc "info <name>", "Display stemcell information, it looks for file <name>-<agent-version>.tar.gz"
    option :file, :banner => "<file>", :desc => "path to the stemcell file, ignores the name"
    def info(name)
      if options[:file]
        # use file
        file_path = File.expand_path(options[:file])
        unless File.exists? file_path
          raise "File #{file_path} does not exist."
        end
        Kernel.system "tar -tvf #{file_path}"
        Dir.mktmpdir {|dir|
          if Kernel.system("tar -xzf #{file_path} stemcell.MF -C #{dir}")
            puts File.open(File.join(dir, "stemcell.MF")).read()
          end
        }
      end
    end

  end

end

StemCellBuilderCLI::StemCellBuilder.start(ARGV)
